// for( i = 0; i < (FILTER_WIDTH*FILTER_HEIGHT*K_FILTERS); ++i) {
  //   printf("W[%d] = %f\n", i, W[i]);
  // }
  //
  // for( i = 0; i < (IN_WIDTH*IN_HEIGHT*IN_DEPTH); ++i) {
  //   printf("IN[%d] = %f\n", i, IN[i]);
  // }
  //
  // for( i = 0; i < (OUT_WIDTH*OUT_HEIGHT*OUT_DEPTH); ++i) {
  //   printf("OUT_TEST[%d] = %f\n", i, OUT_TEST[i]);
  // }
  //
  // for( i = 0; i < (OUT_DEPTH); ++i) {
  //   printf("BIAS[%d] = %f\n", i, BIAS[i]);
  // }

  // for( o_s = 0; o_s < OUT_DEPTH; ++o_s ) {
  //   out_slice = &OUT[o_s * OUT_HEIGHT*OUT_WIDTH];
  //   for(o_x = 0; o_x < OUT_HEIGHT*OUT_WIDTH; ++o_x) {
  //     out_slice[o_x] = BIAS[o_s];
  //   }
  // }
  //
  // for( o_s = 0; o_s < OUT_DEPTH; ++o_s ) {
  //   out_slice = &OUT[o_s * OUT_HEIGHT*OUT_WIDTH]; // Points to the first element of each output slice
  //
  //   for( i_s = 0; i_s < IN_DEPTH; ++i_s ) {
  //     in_slice = &IN[i_s * IN_HEIGHT*IN_WIDTH]; // Points to the first element of each input slice
  //     filter_slice = &W[IN_DEPTH*FILTER_WIDTH*FILTER_HEIGHT * o_s];    // Points to the first element of each filter kernel
  //
  //     for( o_y = 0; o_y < OUT_HEIGHT; ++o_y ) {
  //       in_line = in_slice; // Points to the first line of each slice
  //
  //       for( o_x = 0; o_x < OUT_WIDTH; ++o_x ) {
  //         in_el = in_line;     // Points to the first element of each line
  //         f_el = filter_slice; // Points to the first element of each filter kernel
  //         sum = 0.0;
  //
  //         for( f_y = 0; f_y < FILTER_HEIGHT; ++f_y ) {
  //           for( f_x = 0; f_x < FILTER_WIDTH; ++f_x ) {
  //             sum += in_el[f_x] * f_el[f_x];
  //           }
  //           in_el += IN_WIDTH;    // Increments to next line
  //           f_el += FILTER_WIDTH; // Increments to next kernel
  //         }
  //         out_slice[o_x] += sum;  // Add up the slices
  //         in_line += STRIDE;      // Skip STRIDE elements
  //       }
  //     }
  //   }
  // }
